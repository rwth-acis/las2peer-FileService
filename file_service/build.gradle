/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'idea'
    id 'jacoco'
}

group = 'i5.las2peer.services.fileService'
archivesBaseName = group
version = "${project.property('service.version')}"
mainClassName = "i5.las2peer.services.fileService.FileService"
sourceCompatibility = 14

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()

    // DBIS Archiva
    maven {
        url "https://archiva.dbis.rwth-aachen.de:9911/repository/internal/"
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // las2peer bundle which is not necessary in the runtime path
    // compileOnly will be moved into the lib dir afterwards
    compileOnly "i5:las2peer-bundle:${project.property('core.version')}"

    // These dependencies are used by the application.
}

configurations {
    // This ensures las2peer is available in the tests, but won't be bundled
    testCompile.extendsFrom compileOnly
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jar {
    manifest {
        attributes "Main-Class": "i5.las2peer.services.fileService.FileService"
        attributes "Library-Version": "${project.property('service.version')}"
        attributes "Library-SymbolicName": "${project.property('service.name')}"
    }

    from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } } {
        // Exclude signatures to be able to natively bundle mqtt
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

// These two tasks restore the build and runtime environment used
// in the ant environment
task copyJar(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into '../service'
}

// Maybe there is a more idiomatic way to separate out las2peer
task copyToLib(type: Copy) {
    from configurations.compileOnly
    into "../lib"
}

build.dependsOn copyJar
build.dependsOn copyToLib
