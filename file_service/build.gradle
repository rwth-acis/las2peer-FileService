/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'idea'
    id 'jacoco'
}

application {
    // Define the main class for the application.
    mainClass = "${project.property('service.name')}.${project.property('service.class')}"

    group = "${project.property('service.name')}"
    archivesBaseName = group

    version = "${project.property('service.version')}"
    mainClassName = "i5.las2peer.tools.L2pNodeLauncher"
    sourceCompatibility = "${project.property('java.version')}"
    targetCompatibility = "${project.property('java.version')}"
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()

    // DBIS Archiva
    maven {
        url "https://archiva.dbis.rwth-aachen.de:9911/repository/internal/"
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // las2peer bundle which is not necessary in the runtime path
    // compileOnly will be moved into the lib dir afterwards
    compileOnly "i5:las2peer-bundle:${project.property('core.version')}"

    // These dependencies are used by the application.
}

configurations {
    // This ensures las2peer is available in the tests, but won't be bundled
    testCompile.extendsFrom compileOnly
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
    }
}

jar {
    manifest {
        attributes "Main-Class": "${project.property('service.name')}.${project.property('service.class')}"
        attributes "Library-Version": "${project.property('service.version')}"
        attributes "Library-SymbolicName": "${project.property('service.name')}"
    }

    from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } } {
        // Exclude signatures to be able to natively bundle signed jars
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

// These two tasks restore the build and runtime environment used
// in the ant environment
task copyJar(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into '../service'
}

// Maybe there is a more idiomatic way to separate out las2peer
task copyToLib(type: Copy) {
    from configurations.compileOnly
    into "../lib"
}

task startscripts {
    new File("$rootDir/bin", "start_network.sh").text = """#!/bin/bash
# this script is autogenerated by 'gradle startscripts'
# it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
# pls execute it from the root folder of your deployment, e. g. ./bin/start_network.sh
java -cp "lib/*" i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService\\(\\'${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}\\'\\) startWebConnector interactive
"""
    new File("$rootDir/bin", "start_network.bat").text = """:: this script is autogenerated by 'gradle startscripts'
:: it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
:: pls execute it from the bin folder of your deployment by double-clicking on it
%~d0
cd %~p0
cd ..
set BASE=%CD%
set CLASSPATH="%BASE%/lib/*;"
java -cp %CLASSPATH% i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService('${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}') startWebConnector interactive
pause
"""
}

build.dependsOn javadoc
build.dependsOn copyJar
build.dependsOn copyToLib
build.dependsOn startscripts

// Build export directory which can be shipped on request
task export (type: Copy, dependsOn: build) {
    into "$buildDir/export"

    into("service") {
        from jar
    }
    into("lib") {
        from configurations.compileOnly
    }
    into("bin") {
        from "../bin"
    }
    into("etc") {
        from "../etc"
    }
    into("javadoc") {
        from "$buildDir/docs/javadoc"
    }
}

task packageDistribution(type: Zip, dependsOn: export) {
    archiveFileName = "${project.property('service.class')}.zip"
    destinationDirectory = file("$buildDir/dist")

    from "$buildDir/export"
}

// Cleanup
clean.doLast {
    file("$rootDir/lib").deleteDir()
    file("$rootDir/service").deleteDir()
}

task cleanAll {
    dependsOn "clean"

    doLast {
        file("$rootDir/log").deleteDir()
        file("$projectDir/log").deleteDir()
        file("$rootDir/node-storage").deleteDir()
    }
}
